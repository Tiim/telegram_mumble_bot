// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `TextMessage.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * A text message between users.
 **/
public class TextMessage implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * Sessions (connected users) who were sent this message.
     **/
    public int[] sessions;

    /**
     * Channels who were sent this message.
     **/
    public int[] channels;

    /**
     * Trees of channels who were sent this message.
     **/
    public int[] trees;

    /**
     * The contents of the message.
     **/
    public String text;

    public TextMessage()
    {
    }

    public TextMessage(int[] sessions, int[] channels, int[] trees, String text)
    {
        this.sessions = sessions;
        this.channels = channels;
        this.trees = trees;
        this.text = text;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TextMessage _r = null;
        try
        {
            _r = (TextMessage)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(sessions, _r.sessions))
            {
                return false;
            }
            if(!java.util.Arrays.equals(channels, _r.channels))
            {
                return false;
            }
            if(!java.util.Arrays.equals(trees, _r.trees))
            {
                return false;
            }
            if(text != _r.text)
            {
                if(text == null || _r.text == null || !text.equals(_r.text))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(sessions != null)
        {
            for(int __i0 = 0; __i0 < sessions.length; __i0++)
            {
                __h = 5 * __h + sessions[__i0];
            }
        }
        if(channels != null)
        {
            for(int __i1 = 0; __i1 < channels.length; __i1++)
            {
                __h = 5 * __h + channels[__i1];
            }
        }
        if(trees != null)
        {
            for(int __i2 = 0; __i2 < trees.length; __i2++)
            {
                __h = 5 * __h + trees[__i2];
            }
        }
        if(text != null)
        {
            __h = 5 * __h + text.hashCode();
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        IntListHelper.write(__os, sessions);
        IntListHelper.write(__os, channels);
        IntListHelper.write(__os, trees);
        __os.writeString(text);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        sessions = IntListHelper.read(__is);
        channels = IntListHelper.read(__is);
        trees = IntListHelper.read(__is);
        text = __is.readString();
    }
}
